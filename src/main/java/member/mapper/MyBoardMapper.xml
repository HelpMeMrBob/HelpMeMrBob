<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  
	댓글입니담
-->
<mapper namespace="board.command.MybatisDAOImpl">

	<!-- 게시물의 갯수를 카운트한 후 정수타입으로 반환한다. -->
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) from board_rep
	</select>
	
	<select id="listPage" resultType="board.model.BoardReplyVO">
		SELECT * FROM(
			SELECT Tb.*, rownum rNum FROM(
				SELECT * FROM board_rep ORDER BY idx DESC
		)Tb
	)
	WHERE rNum BETWEEN #{param1} AND #{param2}	
	</select>
	
	<!--  
	@Param 어노테이션에서 지정한 별칭을 사용하여 인파라미터를 처리한다.
	일련번호는 기존과 동일하게 시퀀스를 통해 입력한다.
	-->
	<insert id="write">
		insert into board_rep (idx, rno, id, name, contents) values 
    (#{_idx}, board_rep_seq.nextval, #{_id},#{_name},#{_contents})
	</insert>
	<!--  
	파라미터는 DTO객체에 저장한 후 Mapper로 전달하므로 parameterType 속성에
	해당 DTO객체의 타입을 명시한다. EL에서 멤버변수명만으로 값에 접근할 수 있듯, 
	Mapper에서도 동일하게 접근할 수 있다. 즉, getter()를 사용한다.
	조회된 결과는 MyBoardDTO객체에 저장한 후 반환한다.
	-->
	<!-- 댓글 수정할때 필요한 창입니다. -->
	<select id="view" resultType="board.model.BoardReplyVO"
		parameterType="board.model.ParameterDTO">
		SELECT * FROM board_rep WHERE idx=#{board_idx}
			AND id=#{user_id}
	</select>
	<!-- 
	수정처리. 전송된 폼값은 커맨드 객체를 통해 한꺼번에 전달받으므로 
	각 멤버변수의 getter()를 통해 인파라미터를 처리할 수 있다.
	
	WHERE idx=#{idx} AND id=#{id}
	-->
	<update id="modify" parameterType="board.model.BoardReplyVO">
		UPDATE board_rep
			SET name=#{name},contents=#{contents}
			WHERE idx=#{idx} AND id=#{id}
	</update>
	<!--  
	삭제처리.전달되는 파라미터 순으로 param1, 2형태로 인파라미터 처리함
	-->
	<delete id="delete">
		DELETE FROM board_rep WHERE idx=#{param1} AND id=#{param2}
	</delete>
	
</mapper>